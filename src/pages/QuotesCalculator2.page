<apex:page standardController="Quote__c" extensions="QuotesControllerExtension" >
    
    
    <apex:includeScript value="{!URLFOR($Resource.RXP_CBACALC, 'angular.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.RXP_CBACALC, 'CalcJS.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.RXP_CBACALC, 'LoanProjection.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.RXP_CBACALC, 'LoanProjections.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.RXP_CBACALC, 'ObjTree.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.RXP_CBACALC, 'ng-currency.js')}"/>
    

    <apex:stylesheet value="{!URLFOR($Resource.RXP_CBACALC, 'CalcCss.css')}"/>

    <apex:form id="quoteform">

        <apex:pageBlock id="quoteEdit" mode="Edit" >
            <apex:pageMessages />
            <apex:pageBlockButtons >
                <apex:commandButton value="Save" onclick="updateHiddenValue('{!$Component.detail.data}')" action="{!customsave}"/>
                <apex:commandButton value="Cancel" action="{!cancel}"/>
                <apex:commandButton value="Print Schedule" onclick="updateHiddenValue('{!$Component.detail.data}');" action="{!customSaveNoRedirect}"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection id="detail" title="Quote" columns="2" >
                <apex:inputField id="clientname" value="{!Quote__c.Client_Name__c}" />
                <apex:inputHidden id="data" value="{!Quote__c.XML_Calculation_Data__c}"  /> 
                <apex:inputField value="{!Quote__c.Client_Phone__c}" />
                <apex:inputField id="startdate" value="{!Quote__c.Quote_Start_Date__c}" />
                <apex:inputField value="{!Quote__c.Client_Fax_Email__c}" />
                <apex:outputField value="{!Quote__c.Days_to_Expire__c}" />
                <apex:inputField id="itemtype" value="{!Quote__c.Item_Type__c}" />

                <apex:inputField value="{!Quote__c.Documentation_Fee__c}" />
                <apex:inputField value="{!Quote__c.Status__c}" />
                <apex:inputField value="{!Quote__c.Security_Registration_Fee__c}" /> 
            </apex:pageBlockSection>
            <apex:pageBlockSection id="additionalStuff" title="Additional info" columns="1" showHeader="false"  >
                <apex:inputField value="{!Quote__c.Addional_Disclosure__c}" style="width:600px"  /> 
            </apex:pageBlockSection>
            <apex:pageBlockSection id="rxpCalc" title="Financial Calculators">
                <c:QuoteComponent />
            </apex:pageBlockSection>
        </apex:pageBlock>

        <script language="JavaScript" type="text/javascript">
        function updateHiddenValue(eId){
            //alert('updateHiddenValue called');
            var scope = angular.element(document.querySelector('#CBA_CALC')).scope();

            var e = document.getElementById(eId);
            e.value = scope.xmlOut.replace('<?xml version="1.0" encoding="UTF-8" ?>' , '');
        }
        
        function LoadXMLDataFromRecord()
        {
            
            if('{!currentRecordId}' != '')
            {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.QuotesControllerExtension.getXMLData}',
                     '{!currentRecordId}',
                    function(result, event) {
                        var scope = angular.element(document.querySelector('#CBA_CALC')).scope();
                        var xotree = new XML.ObjTree();
                        
                        //var xmlData = unescape(result)
                        
                        var xmlData =  angular.element('<textarea />').html(result).text();


                        var jsonData = xotree.parseXML( xmlData );

                        var formData =  jsonData.CBACalculatorTools.CBACalculatorForm;

                        scope.CalcType = formData.CalcType;
                        scope.InAdvanced = formData.InAdvanced;
                        scope.Frequency = formData.Frequency;
                        scope.State = formData.State;

                        var parts = formData.DDate.split("/");
                        var dt = new Date(parseInt(parts[2], 10),
                                          parseInt(parts[1], 10) - 1,
                                          parseInt(parts[0], 10));


                        if ( jsonData.CBACalculatorTools.CBACalculatorSchedule.Seasonal != null && jsonData.CBACalculatorTools.CBACalculatorSchedule.Seasonal != 'null'){
                            scope.IsSeasonal = true;
                            var seasonalStrArray = jsonData.CBACalculatorTools.CBACalculatorSchedule.Seasonal.split(',')
                            var cnt = 0;
                            while (cnt < seasonalStrArray.length){
                                scope.Seasonal[cnt] = JSON.parse(seasonalStrArray[cnt]);
                                cnt++;
                            }

                        }
                        else{
                            scope.IsSeasonal = false;
                        }

                        scope.DDateText = dt;//dt.yyyymmdd();//formData.DDate;
                        scope.AssetType = formData.AssetType;
                        scope.EquipmentCost = Number(formData.EquipmentCost);
                        scope.TradeIn = Number(formData.TradeIn);
                        scope.MVRegoCost = Number(formData.MVRegoCost);
                        scope.Options = Number(formData.Options);
                        scope.SupplierDelivery = Number(formData.SupplierDelivery);
                        scope.SupplierDiscount = Number(formData.SupplierDiscount);
                        scope.FeesAndChargesFinanced = Number(formData.FeesAndChargesFinanced);
                        scope.LessorRate = Number(formData.LessorRate);
                        scope.TermInMonths = Number(formData.TermInMonths);
                        scope.BrokageAmount = Number(formData.BrokageAmount);
                        scope.ResidualAmount = Number(formData.ResidualAmount);
                        scope.DelayedPayment = Number(formData.DelayedPayment);


                        var factsData =  jsonData.CBACalculatorTools.CBACalculatorFacts;

       
                                          //"LCTLimit": $scope.LCTLimit(),
                        scope.LCTLimitFuelEfficient = Number(factsData.LCTLimitFuelEfficient); // LCTLimitFuelEfficient__c
                        scope.GSTPercentRate  = Number(factsData.GSTPercentRate); //GSTPercentRate__c
                        scope.MortgageDutyBaseNSW = Number(factsData.MortgageDutyBaseNSW); // MortgageDutyBaseNSW__c
                        scope.MortgageDutyLimitNSW = Number(factsData.MortgageDutyLimitNSW);// MortgageDutyLimitNSW__c
                        scope.MortgageDutyRateNSW = Number(factsData.MortgageDutyRateNSW);// MortgageDutyRateSA__c
                        scope.MortgageDutyCeilFactorNSW = Number(factsData.MortgageDutyCeilFactorNSW);// MortgageDutyCeilFactorNSW__c
                        scope.MortgageDutyBaseSA = Number(factsData.MortgageDutyBaseSA);// MortgageDutyBaseSA__c
                        scope.MortgageDutyLimitSA = Number(factsData.MortgageDutyLimitSA);// MortgageDutyLimitSA__c
                        scope.MortgageDutyRateSA = Number(factsData.MortgageDutyRateSA);//  MortgageDutyRateSA__c
                        scope.MortgageDutyCeilFactorSA = Number(factsData.MortgageDutyCeilFactorSA);// MortgageDutyCeilFactorSA__c

                        if (factsData.LCTRate)
                            scope.LCTRate = Number(factsData.LCTRate); // LCTRate__c
                        if (factsData.LCTLuxuryThreshold)
                            scope.LCTLuxuryThreshold = Number(factsData.LCTLuxuryThreshold); //LCTLuxuryThreshold__c (New)
                        if (factsData.LCTCarLimit)
                            scope.LCTCarLimit = Number(factsData.LCTCarLimit);//LCTLimitLuxury__c


                        //console.log(xmlData);
                        console.log(jsonData);
                        
                        scope.TypeChanged();

                        scope.setAddPaymentArray(jsonData.CBACalculatorTools.CBACalculatorSchedule.CBACalculatorAddPayments);
                        scope.ComputeFromAmountFinanced();
                        scope.$apply();

                    }
                );
            }
            else
            {

                Visualforce.remoting.Manager.invokeAction(
                    'QuotesControllerExtension.getNothing',
                    function(result, event) {
                        var scope = angular.element(document.querySelector('#CBA_CALC')).scope();
                        console.log('Hi YA!! {!$Setup.CalculatorFigures__c.MortgageDutyRateSA__c}');
                        //then load the custom settings

                        scope.LCTLimitFuelEfficient = Number({!$Setup.CalculatorFigures__c.LCTLimitFuelEfficient__c}); // LCTLimitFuelEfficient__c
                        scope.GSTPercentRate  = Number({!$Setup.CalculatorFigures__c.GSTPercentRate__c}); //GSTPercentRate__c
                        scope.MortgageDutyBaseNSW = Number({!$Setup.CalculatorFigures__c.MortgageDutyBaseNSW__c}); // MortgageDutyBaseNSW__c
                        scope.MortgageDutyLimitNSW = Number({!$Setup.CalculatorFigures__c.MortgageDutyLimitNSW__c});// MortgageDutyLimitNSW__c
                        scope.MortgageDutyRateNSW = Number({!$Setup.CalculatorFigures__c.MortgageDutyRateNSW__c});// MortgageDutyRateNSW__c     MortgageDutyRateNSW__c
                        scope.MortgageDutyCeilFactorNSW = Number({!$Setup.CalculatorFigures__c.MortgageDutyCeilFactorNSW__c});// MortgageDutyCeilFactorNSW__c
                        scope.MortgageDutyBaseSA = Number({!$Setup.CalculatorFigures__c.MortgageDutyBaseSA__c});// MortgageDutyBaseSA__c
                        scope.MortgageDutyLimitSA = Number({!$Setup.CalculatorFigures__c.MortgageDutyLimitSA__c});// MortgageDutyLimitSA__c
                        scope.MortgageDutyRateSA = Number({!$Setup.CalculatorFigures__c.MortgageDutyRateSA__c});//  MortgageDutyRateSA__c
                        scope.MortgageDutyCeilFactorSA = Number({!$Setup.CalculatorFigures__c.MortgageDutyCeilFactorSA__c});// MortgageDutyCeilFactorSA__c
                        scope.LCTRate = Number({!$Setup.CalculatorFigures__c.LCTRate__c}); // LCTRate__c
                        scope.LCTLuxuryThreshold = Number({!$Setup.CalculatorFigures__c.LCTLuxuryThreshold__c}); //LCTLuxuryThreshold__c (New)
                        scope.LCTCarLimit = Number({!$Setup.CalculatorFigures__c.LCTLimitLuxury__c});//LCTLimitLuxury__c

                        scope.$apply();
                    }
                );
            }
        }

        function PrintSchedule()
        {

             window.open('{!urlfor($Page.QuotesCalculatorPrint)}?id={!currentRecordId}');
        }

        LoadXMLDataFromRecord();

    </script>
    </apex:form>

</apex:page>